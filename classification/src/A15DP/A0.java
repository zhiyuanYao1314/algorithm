package A15DP;

public class A0 {

    /**
     * 1.背包
     *  1.1 01背包；
     *      1.1.1: dp公式：dp[i] = max (dp[i](不选)+ dp[i-w[i]]+v[i](选取) )
     *      1.1.2: 初始化：都是0， 表示没有物品的价值是0；
     *      1.1.3: 填表的顺序：w 从后向前，因为i+1的值取决于i的值，
     *
     *  1.2 无限背包
     *      1.2.1 换硬币 最少使用的硬币数；
     *          因为需要恰好等于，所以初始化除了0的位置为0，表示需要0块换取，其他的去count+1表示无法换取；
     *          因为无限，所以填表的顺序 从前向后；
     *          dp[i] = min (dp[i]不选, dp[i-w[i]]+1 选);
     *      1.2.2 换硬币 有多少种换法；
     *          不同的地方：
     *          初始化：除了0的位置为1，表示1种方案， 其他的地方为0表示不存在
     *          dp[i] = dp[i]不选 + dp[i-w[i]]选
     *
     *  1.3 有限背包
     *      互转化为01背包
     *
     * 2.fibnacci 跳楼梯
     *  2.1 fubanacci 递归解法，memo记录，dp解法，2个变量保存；
     *  2.2 跳楼梯 有多少种跳法：
     *      2.2.1 可以跳一层或两层；
     *      2.2.2 可以跳1-n层；
     *
     *
     * 3.回文字符串
     *  3.1 最长回文子串：
     *  3.2 最长回文子序列：
     *
     */
}