package A15DP;

/**
 * Author:yaozhiyuan0117@163.com
 * Time:2020/5/5 14:50
 * Describe:
 * version:1.0
 */
public class AO {
    /**
     * 1. 01背包， dp[j] = (dp[j-w[j-1]]+v[j-1], dp[j]) 从后往前space(On)
     * 2. 完全背包，无限背包， dp[j] = dp[j-w[j-1]]+v[j-1],dp[j]; 从前往后
     * 3. 多重背包，每个元素有限定次数，
     *      方法1：01背包再加一层for循环，dp[j] = (dp[j-k*w[j-1]]+k*v[j-1], dp[j]);
     *      方法2：一个物品有7个，被拆分成1 2 4分；然后就构成了所有的组合(0-7)；
     *      方法3： 还没理解完？
     * 4. 混合背包，有的只有一个，有的无限个，有的个数有限。转化成01背包和完全背包，然后for i层循环的时候判断一下，是从前往后还是从后往前！
     * 5. 双条件限制，背包既有重量，又有体积限制。？？还没下
     *
     * 以上问题，还有一个角度划分，背包是否需要刚好装满？
     *      区别在于初始化，如果不需要，初始化dp[j]=0 for each j; 如果需要，dp[0]=0, dp[j]=-INF,
     *      因为开始物品为0的时候，只有背包为0是刚好装满，
     */
}