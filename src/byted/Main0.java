package byted;

public class Main0 {

    /**
     * 12 旋转排序数组的搜索：
     *  1. 利用左半段和右半段一定有一半是有序的，
     *  2. 在判断 是否在有序的那一段里面，如果不在， 就在另外一半；
     *  3.
     *
     * 明天从25开始
     * 到 有想法了
     *
     *
     * 37 最大子序和
     *
     * 42/460 LRU算法 两个hashMap, 一个存储key-Node, 第二个存储frequency-node链表,
     *  整个put和get的过程实际包括： deleteNode, addToNextNode， addNewNode 都是链表操作，时间复杂度1；
     *
     * 43/128 未排序的数组的连续子序列；要求n
     *      以n开始的连续点，
     *      节约：如果存在n-1，就不需要计算！
     *
     *
     */

    /**
     * 45 重新捋一下！！！
     * 看到46/47
     */

}
